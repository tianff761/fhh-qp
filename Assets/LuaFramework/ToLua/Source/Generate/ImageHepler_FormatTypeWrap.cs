//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ImageHepler_FormatTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(ImageHepler.FormatType));
		L.RegVar("PNG", get_PNG, null);
		L.RegVar("JPG", get_JPG, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<ImageHepler.FormatType>.Check = CheckType;
		StackTraits<ImageHepler.FormatType>.Push = Push;
	}

	static void Push(IntPtr L, ImageHepler.FormatType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(ImageHepler.FormatType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PNG(IntPtr L)
	{
		ToLua.Push(L, ImageHepler.FormatType.PNG);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JPG(IntPtr L)
	{
		ToLua.Push(L, ImageHepler.FormatType.JPG);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		ImageHepler.FormatType o = (ImageHepler.FormatType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

