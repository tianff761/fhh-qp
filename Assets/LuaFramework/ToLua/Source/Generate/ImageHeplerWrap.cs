//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ImageHeplerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ImageHepler), typeof(System.Object));
		L.RegFunction("Compress", Compress);
		L.RegFunction("New", _CreateImageHepler);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateImageHepler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ImageHepler obj = new ImageHepler();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ImageHepler.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Compress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool o = ImageHepler.Compress(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				bool o = ImageHepler.Compress(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				ImageHepler.FormatType arg3 = (ImageHepler.FormatType)ToLua.CheckObject(L, 4, typeof(ImageHepler.FormatType));
				bool o = ImageHepler.Compress(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ImageHepler.Compress");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

