//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MahjongHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MahjongHelper), typeof(System.Object));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("SetTingYong", SetTingYong);
		L.RegFunction("SetRules", SetRules);
		L.RegFunction("ClearRuleFanNum", ClearRuleFanNum);
		L.RegFunction("SetRuleFanNum", SetRuleFanNum);
		L.RegFunction("SetRuleFanNums", SetRuleFanNums);
		L.RegFunction("GetRuleFanNum", GetRuleFanNum);
		L.RegFunction("SetLeftCards", SetLeftCards);
		L.RegFunction("Check", Check);
		L.RegFunction("CheckIsHu", CheckIsHu);
		L.RegFunction("New", _CreateMahjongHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMahjongHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MahjongHelper obj = new MahjongHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MahjongHelper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MahjongHelper.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTingYong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 1);
			MahjongHelper.SetTingYong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRules(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
			bool arg5 = LuaDLL.luaL_checkboolean(L, 6);
			bool arg6 = LuaDLL.luaL_checkboolean(L, 7);
			bool arg7 = LuaDLL.luaL_checkboolean(L, 8);
			MahjongHelper.SetRules(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearRuleFanNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			MahjongHelper.ClearRuleFanNum();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRuleFanNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			MahjongHelper.SetRuleFanNum(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRuleFanNums(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 1);
			int[] arg1 = ToLua.CheckNumberArray<int>(L, 2);
			MahjongHelper.SetRuleFanNums(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRuleFanNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = MahjongHelper.GetRuleFanNum(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLeftCards(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MahjongLeftData[] arg0 = ToLua.CheckObjectArray<MahjongLeftData>(L, 1);
			MahjongHelper.SetLeftCards(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Check(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			MahjongResultData[] o = MahjongHelper.Check(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckIsHu(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.List<MahjongCheckData> arg0 = (System.Collections.Generic.List<MahjongCheckData>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<MahjongCheckData>));
			bool o = MahjongHelper.CheckIsHu(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

