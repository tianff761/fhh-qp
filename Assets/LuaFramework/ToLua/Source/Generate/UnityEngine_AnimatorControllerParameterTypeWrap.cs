//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_AnimatorControllerParameterTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.AnimatorControllerParameterType));
		L.RegVar("Float", get_Float, null);
		L.RegVar("Int", get_Int, null);
		L.RegVar("Bool", get_Bool, null);
		L.RegVar("Trigger", get_Trigger, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UnityEngine.AnimatorControllerParameterType>.Check = CheckType;
		StackTraits<UnityEngine.AnimatorControllerParameterType>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.AnimatorControllerParameterType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UnityEngine.AnimatorControllerParameterType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Float(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.AnimatorControllerParameterType.Float);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Int(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.AnimatorControllerParameterType.Int);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bool(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.AnimatorControllerParameterType.Bool);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Trigger(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.AnimatorControllerParameterType.Trigger);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.AnimatorControllerParameterType o = (UnityEngine.AnimatorControllerParameterType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

