//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class VersionManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(VersionManager), typeof(TSingleton<VersionManager>));
		L.RegFunction("SetRemoteVersionData", SetRemoteVersionData);
		L.RegFunction("GetGameRemoteVersion", GetGameRemoteVersion);
		L.RegFunction("GetGameRemoteVersionNum", GetGameRemoteVersionNum);
		L.RegFunction("GetGameRemoteVersionStr", GetGameRemoteVersionStr);
		L.RegFunction("GetGameAssetsPath", GetGameAssetsPath);
		L.RegFunction("SetLocalVersionData", SetLocalVersionData);
		L.RegFunction("IsLoadLocalVersion", IsLoadLocalVersion);
		L.RegFunction("SetLocalGameVersion", SetLocalGameVersion);
		L.RegFunction("GetLocalVersionJson", GetLocalVersionJson);
		L.RegFunction("GetGameLocalVersion", GetGameLocalVersion);
		L.RegFunction("GetGameLocalVersionNum", GetGameLocalVersionNum);
		L.RegFunction("GetGameLocalVersionStr", GetGameLocalVersionStr);
		L.RegFunction("CheckGameNeedUpgrade", CheckGameNeedUpgrade);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("appRemoteVersionStr", get_appRemoteVersionStr, null);
		L.RegVar("appRemoteVersionNum", get_appRemoteVersionNum, null);
		L.RegVar("appRemoteVersionUrl", get_appRemoteVersionUrl, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRemoteVersionData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetRemoteVersionData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameRemoteVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Version o = obj.GetGameRemoteVersion(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameRemoteVersionNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.GetGameRemoteVersionNum(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameRemoteVersionStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetGameRemoteVersionStr(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameAssetsPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetGameAssetsPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLocalVersionData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetLocalVersionData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoadLocalVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			bool o = obj.IsLoadLocalVersion();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLocalGameVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetLocalGameVersion(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLocalVersionJson(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string o = obj.GetLocalVersionJson();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameLocalVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Version o = obj.GetGameLocalVersion(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameLocalVersionNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.GetGameLocalVersionNum(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameLocalVersionStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetGameLocalVersionStr(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckGameNeedUpgrade(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VersionManager obj = (VersionManager)ToLua.CheckObject<VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.CheckGameNeedUpgrade(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_appRemoteVersionStr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VersionManager obj = (VersionManager)o;
			string ret = obj.appRemoteVersionStr;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index appRemoteVersionStr on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_appRemoteVersionNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VersionManager obj = (VersionManager)o;
			int ret = obj.appRemoteVersionNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index appRemoteVersionNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_appRemoteVersionUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VersionManager obj = (VersionManager)o;
			string ret = obj.appRemoteVersionUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index appRemoteVersionUrl on a nil value");
		}
	}
}

