//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PlaybackDataManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PlaybackDataManager), typeof(TSingleton<PlaybackDataManager>));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("GetDicPath", GetDicPath);
		L.RegFunction("GetDicPathUrl", GetDicPathUrl);
		L.RegFunction("DownPlayback", DownPlayback);
		L.RegFunction("CheckLocal", CheckLocal);
		L.RegFunction("DownPlaybackByUrl", DownPlaybackByUrl);
		L.RegFunction("WritePlaybackData", WritePlaybackData);
		L.RegFunction("CheckLocalMaxCount", CheckLocalMaxCount);
		L.RegFunction("DestroyAllData", DestroyAllData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("maxRetryDownCount", get_maxRetryDownCount, set_maxRetryDownCount);
		L.RegVar("downTimeOut", get_downTimeOut, set_downTimeOut);
		L.RegVar("maxSaveLocalCount", get_maxSaveLocalCount, set_maxSaveLocalCount);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDicPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			string o = obj.GetDicPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDicPathUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			string o = obj.GetDicPathUrl();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownPlayback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<int,string> arg1 = (System.Action<int,string>)ToLua.CheckDelegate<System.Action<int,string>>(L, 3);
			obj.DownPlayback(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLocal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.CheckLocal(arg0);
				return 0;
			}
			else if (count == 3)
			{
				PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<int,string> arg1 = (System.Action<int,string>)ToLua.CheckDelegate<System.Action<int,string>>(L, 3);
				obj.CheckLocal(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlaybackDataManager.CheckLocal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownPlaybackByUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DownPlaybackByUrl(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WritePlaybackData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.WritePlaybackData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLocalMaxCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			obj.CheckLocalMaxCount();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAllData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)ToLua.CheckObject<PlaybackDataManager>(L, 1);
			obj.DestroyAllData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxRetryDownCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)o;
			int ret = obj.maxRetryDownCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxRetryDownCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_downTimeOut(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)o;
			float ret = obj.downTimeOut;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index downTimeOut on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxSaveLocalCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)o;
			int ret = obj.maxSaveLocalCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxSaveLocalCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxRetryDownCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.maxRetryDownCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxRetryDownCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_downTimeOut(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.downTimeOut = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index downTimeOut on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxSaveLocalCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlaybackDataManager obj = (PlaybackDataManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.maxSaveLocalCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxSaveLocalCount on a nil value");
		}
	}
}

