//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SensitiveWordsManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SensitiveWordsManager), typeof(TSingleton<SensitiveWordsManager>));
		L.RegFunction("ReadSensitiveWordsByResources", ReadSensitiveWordsByResources);
		L.RegFunction("ReadSensitiveWordsByUrl", ReadSensitiveWordsByUrl);
		L.RegFunction("ReadSensitiveWordsByAssetBunld", ReadSensitiveWordsByAssetBunld);
		L.RegFunction("ReadSensitiveWordsString", ReadSensitiveWordsString);
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("AddWord", AddWord);
		L.RegFunction("RemoveWord", RemoveWord);
		L.RegFunction("CheckExistWord", CheckExistWord);
		L.RegFunction("CheckExistPhrases", CheckExistPhrases);
		L.RegFunction("ReplaceWordAtPhrases", ReplaceWordAtPhrases);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("readText", get_readText, set_readText);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSensitiveWordsByResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.ReadSensitiveWordsByResources(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSensitiveWordsByUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.ReadSensitiveWordsByUrl(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSensitiveWordsByAssetBunld(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
			obj.ReadSensitiveWordsByAssetBunld(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSensitiveWordsString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.ReadSensitiveWordsString(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddWord(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveWord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveWord(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckExistWord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.CheckExistWord(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckExistPhrases(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.CheckExistPhrases(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceWordAtPhrases(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SensitiveWordsManager obj = (SensitiveWordsManager)ToLua.CheckObject<SensitiveWordsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string o = obj.ReplaceWordAtPhrases(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_readText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SensitiveWordsManager obj = (SensitiveWordsManager)o;
			string ret = obj.readText;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index readText on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_readText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SensitiveWordsManager obj = (SensitiveWordsManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.readText = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index readText on a nil value");
		}
	}
}

