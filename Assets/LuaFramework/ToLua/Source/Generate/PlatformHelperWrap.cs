//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PlatformHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PlatformHelper), typeof(System.Object));
		L.RegFunction("InitPlatform", InitPlatform);
		L.RegFunction("SetLuaStarted", SetLuaStarted);
		L.RegFunction("CopyText", CopyText);
		L.RegFunction("GetCopyText", GetCopyText);
		L.RegFunction("ClearAppData", ClearAppData);
		L.RegFunction("GetRoomCode", GetRoomCode);
		L.RegFunction("ClearRoomCode", ClearRoomCode);
		L.RegFunction("GetBatteryState", GetBatteryState);
		L.RegFunction("Share", Share);
		L.RegFunction("ShareScreenshotImageByCamera", ShareScreenshotImageByCamera);
		L.RegFunction("GetScreenshotPngBytesByCamera", GetScreenshotPngBytesByCamera);
		L.RegFunction("GetScreenshotPngBytes", GetScreenshotPngBytes);
		L.RegFunction("HandleScreenshot", HandleScreenshot);
		L.RegFunction("ClearShareImagePngBytes", ClearShareImagePngBytes);
		L.RegFunction("HandleShareAssetImage", HandleShareAssetImage);
		L.RegFunction("OpenOtherApp", OpenOtherApp);
		L.RegFunction("QuitGame", QuitGame);
		L.RegFunction("GetIsOpenAppGPS", GetIsOpenAppGPS);
		L.RegFunction("GetIsAppGPSEnable", GetIsAppGPSEnable);
		L.RegFunction("GetOriginGpsInfo", GetOriginGpsInfo);
		L.RegFunction("GetIsAppAnyEnable", GetIsAppAnyEnable);
		L.RegFunction("OpenAppDetail", OpenAppDetail);
		L.RegFunction("OpenDeviceSetting", OpenDeviceSetting);
		L.RegFunction("StartScreenShotListen", StartScreenShotListen);
		L.RegFunction("StopScreenShotListen", StopScreenShotListen);
		L.RegFunction("SaveImageToPhone", SaveImageToPhone);
		L.RegFunction("ShowPlatformToast", ShowPlatformToast);
		L.RegFunction("InitWeChat", InitWeChat);
		L.RegFunction("AuthLogin", AuthLogin);
		L.RegFunction("GetImagePathByPhoto", GetImagePathByPhoto);
		L.RegFunction("HandleData", HandleData);
		L.RegFunction("New", _CreatePlatformHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePlatformHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PlatformHelper obj = new PlatformHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PlatformHelper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitPlatform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.InitPlatform();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLuaStarted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.SetLuaStarted();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			PlatformHelper.CopyText(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCopyText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			PlatformHelper.GetCopyText(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAppData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.ClearAppData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoomCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.GetRoomCode();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearRoomCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.ClearRoomCode();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBatteryState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			PlatformHelper.GetBatteryState(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Share(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				string arg5 = ToLua.CheckString(L, 6);
				PlatformHelper.Share(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 7)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				string arg5 = ToLua.CheckString(L, 6);
				string arg6 = ToLua.CheckString(L, 7);
				PlatformHelper.Share(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlatformHelper.Share");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShareScreenshotImageByCamera(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				PlatformHelper.ShareScreenshotImageByCamera(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				PlatformHelper.ShareScreenshotImageByCamera(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				PlatformHelper.ShareScreenshotImageByCamera(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 7)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				PlatformHelper.ShareScreenshotImageByCamera(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 8)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				PlatformHelper.ShareScreenshotImageByCamera(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlatformHelper.ShareScreenshotImageByCamera");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScreenshotPngBytesByCamera(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
				byte[] o = PlatformHelper.GetScreenshotPngBytesByCamera(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				byte[] o = PlatformHelper.GetScreenshotPngBytesByCamera(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				byte[] o = PlatformHelper.GetScreenshotPngBytesByCamera(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				byte[] o = PlatformHelper.GetScreenshotPngBytesByCamera(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				byte[] o = PlatformHelper.GetScreenshotPngBytesByCamera(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlatformHelper.GetScreenshotPngBytesByCamera");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScreenshotPngBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PlatformHelper.GetScreenshotPngBytes();
				return 0;
			}
			else if (count == 1)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				PlatformHelper.GetScreenshotPngBytes(arg0);
				return 0;
			}
			else if (count == 2)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				PlatformHelper.GetScreenshotPngBytes(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				PlatformHelper.GetScreenshotPngBytes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				PlatformHelper.GetScreenshotPngBytes(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				PlatformHelper.GetScreenshotPngBytes(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlatformHelper.GetScreenshotPngBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HandleScreenshot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Collections.IEnumerator o = PlatformHelper.HandleScreenshot();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				System.Collections.IEnumerator o = PlatformHelper.HandleScreenshot(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Collections.IEnumerator o = PlatformHelper.HandleScreenshot(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Collections.IEnumerator o = PlatformHelper.HandleScreenshot(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Collections.IEnumerator o = PlatformHelper.HandleScreenshot(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.Collections.IEnumerator o = PlatformHelper.HandleScreenshot(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlatformHelper.HandleScreenshot");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearShareImagePngBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.ClearShareImagePngBytes();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HandleShareAssetImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
			LuaTable arg3 = ToLua.CheckLuaTable(L, 4);
			PlatformHelper.HandleShareAssetImage(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenOtherApp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			PlatformHelper.OpenOtherApp(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int QuitGame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.QuitGame();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIsOpenAppGPS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.GetIsOpenAppGPS();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIsAppGPSEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.GetIsAppGPSEnable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOriginGpsInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.GetOriginGpsInfo();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIsAppAnyEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			PlatformHelper.GetIsAppAnyEnable(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenAppDetail(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.OpenAppDetail();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenDeviceSetting(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.OpenDeviceSetting();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartScreenShotListen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.StartScreenShotListen();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopScreenShotListen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.StopScreenShotListen();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveImageToPhone(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<UnityEngine.UI.Image>(L, 1))
			{
				UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.ToObject(L, 1);
				PlatformHelper.SaveImageToPhone(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Sprite>(L, 1))
			{
				UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.ToObject(L, 1);
				PlatformHelper.SaveImageToPhone(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Texture2D>(L, 1))
			{
				UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.ToObject(L, 1);
				PlatformHelper.SaveImageToPhone(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				PlatformHelper.SaveImageToPhone(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.UI.Image, string>(L, 1))
			{
				UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				PlatformHelper.SaveImageToPhone(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Sprite, string>(L, 1))
			{
				UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				PlatformHelper.SaveImageToPhone(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Texture2D, string>(L, 1))
			{
				UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				PlatformHelper.SaveImageToPhone(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[], string>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				PlatformHelper.SaveImageToPhone(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlatformHelper.SaveImageToPhone");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowPlatformToast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			PlatformHelper.ShowPlatformToast(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitWeChat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			PlatformHelper.InitWeChat(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AuthLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			PlatformHelper.AuthLogin(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetImagePathByPhoto(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			PlatformHelper.GetImagePathByPhoto();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HandleData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			PlatformHelper.HandleData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

