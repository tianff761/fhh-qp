//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_AnimationStateDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.AnimationStateData), typeof(System.Object));
		L.RegFunction("SetMix", SetMix);
		L.RegFunction("GetMix", GetMix);
		L.RegFunction("New", _CreateSpine_AnimationStateData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("SkeletonData", get_SkeletonData, null);
		L.RegVar("DefaultMix", get_DefaultMix, set_DefaultMix);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_AnimationStateData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Spine.SkeletonData arg0 = (Spine.SkeletonData)ToLua.CheckObject<Spine.SkeletonData>(L, 1);
				Spine.AnimationStateData obj = new Spine.AnimationStateData(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.AnimationStateData.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMix(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<string, string, float>(L, 2))
			{
				Spine.AnimationStateData obj = (Spine.AnimationStateData)ToLua.CheckObject<Spine.AnimationStateData>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.SetMix(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Spine.Animation, Spine.Animation, float>(L, 2))
			{
				Spine.AnimationStateData obj = (Spine.AnimationStateData)ToLua.CheckObject<Spine.AnimationStateData>(L, 1);
				Spine.Animation arg0 = (Spine.Animation)ToLua.ToObject(L, 2);
				Spine.Animation arg1 = (Spine.Animation)ToLua.ToObject(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.SetMix(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Spine.AnimationStateData.SetMix");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Spine.AnimationStateData obj = (Spine.AnimationStateData)ToLua.CheckObject<Spine.AnimationStateData>(L, 1);
			Spine.Animation arg0 = (Spine.Animation)ToLua.CheckObject<Spine.Animation>(L, 2);
			Spine.Animation arg1 = (Spine.Animation)ToLua.CheckObject<Spine.Animation>(L, 3);
			float o = obj.GetMix(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SkeletonData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.AnimationStateData obj = (Spine.AnimationStateData)o;
			Spine.SkeletonData ret = obj.SkeletonData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SkeletonData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultMix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.AnimationStateData obj = (Spine.AnimationStateData)o;
			float ret = obj.DefaultMix;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultMix on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultMix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.AnimationStateData obj = (Spine.AnimationStateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DefaultMix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultMix on a nil value");
		}
	}
}

