//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UpgradeManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UpgradeManager), typeof(TMonoBehaviour<UpgradeManager>));
		L.RegFunction("Check", Check);
		L.RegFunction("CheckWithoutVersion", CheckWithoutVersion);
		L.RegFunction("CheckRemoteConfig", CheckRemoteConfig);
		L.RegFunction("GetRandomNumber", GetRandomNumber);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("RemoteResUrl", get_RemoteResUrl, set_RemoteResUrl);
		L.RegVar("RemoteZonePrefix", get_RemoteZonePrefix, set_RemoteZonePrefix);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Check(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UpgradeManager obj = (UpgradeManager)ToLua.CheckObject<UpgradeManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.Check(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UpgradeManager obj = (UpgradeManager)ToLua.CheckObject<UpgradeManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				System.Action<int,float> arg2 = (System.Action<int,float>)ToLua.CheckDelegate<System.Action<int,float>>(L, 4);
				obj.Check(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UpgradeManager.Check");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckWithoutVersion(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UpgradeManager obj = (UpgradeManager)ToLua.CheckObject<UpgradeManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.CheckWithoutVersion(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UpgradeManager obj = (UpgradeManager)ToLua.CheckObject<UpgradeManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				System.Action<int,float> arg2 = (System.Action<int,float>)ToLua.CheckDelegate<System.Action<int,float>>(L, 4);
				obj.CheckWithoutVersion(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UpgradeManager.CheckWithoutVersion");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckRemoteConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UpgradeManager obj = (UpgradeManager)ToLua.CheckObject<UpgradeManager>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.CheckRemoteConfig(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRandomNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = UpgradeManager.GetRandomNumber();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RemoteResUrl(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UpgradeManager.RemoteResUrl);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RemoteZonePrefix(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UpgradeManager.RemoteZonePrefix);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RemoteResUrl(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			UpgradeManager.RemoteResUrl = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RemoteZonePrefix(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			UpgradeManager.RemoteZonePrefix = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

