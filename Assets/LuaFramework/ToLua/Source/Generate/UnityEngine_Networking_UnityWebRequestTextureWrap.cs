//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Networking_UnityWebRequestTextureWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UnityWebRequestTexture");
		L.RegFunction("GetTexture", GetTexture);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				UnityEngine.Networking.UnityWebRequest o = UnityEngine.Networking.UnityWebRequestTexture.GetTexture(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Uri>(L, 1))
			{
				System.Uri arg0 = (System.Uri)ToLua.ToObject(L, 1);
				UnityEngine.Networking.UnityWebRequest o = UnityEngine.Networking.UnityWebRequestTexture.GetTexture(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, bool>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				UnityEngine.Networking.UnityWebRequest o = UnityEngine.Networking.UnityWebRequestTexture.GetTexture(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Uri, bool>(L, 1))
			{
				System.Uri arg0 = (System.Uri)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				UnityEngine.Networking.UnityWebRequest o = UnityEngine.Networking.UnityWebRequestTexture.GetTexture(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.UnityWebRequestTexture.GetTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

