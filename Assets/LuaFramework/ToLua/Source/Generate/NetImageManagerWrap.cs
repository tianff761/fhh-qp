//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetImageManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetImageManager), typeof(TMonoBehaviour<NetImageManager>));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Load", Load);
		L.RegFunction("Exists", Exists);
		L.RegFunction("Get", Get);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("SetRawImage", SetRawImage);
		L.RegFunction("SetGORawImage", SetGORawImage);
		L.RegFunction("SetImage", SetImage);
		L.RegFunction("SetGOImage", SetGOImage);
		L.RegFunction("CheckCacheState", CheckCacheState);
		L.RegFunction("RemoveCache", RemoveCache);
		L.RegFunction("DeleteLocal", DeleteLocal);
		L.RegFunction("CheckLocal", CheckLocal);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CacheMaxTotal", get_CacheMaxTotal, set_CacheMaxTotal);
		L.RegVar("CacheCheckInterval", get_CacheCheckInterval, set_CacheCheckInterval);
		L.RegVar("LocalCheckInterval", get_LocalCheckInterval, set_LocalCheckInterval);
		L.RegVar("CacheTime", get_CacheTime, set_CacheTime);
		L.RegVar("LoadMaxTotal", get_LoadMaxTotal, set_LoadMaxTotal);
		L.RegVar("ReloadMaxTotal", get_ReloadMaxTotal, set_ReloadMaxTotal);
		L.RegVar("LoadTimeout", get_LoadTimeout, set_LoadTimeout);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
			obj.Load(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Exists(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.Exists(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Texture o = obj.Get(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite o = obj.GetSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRawImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			UnityEngine.UI.RawImage arg0 = (UnityEngine.UI.RawImage)ToLua.CheckObject<UnityEngine.UI.RawImage>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.SetRawImage(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGORawImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.SetGORawImage(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckObject<UnityEngine.UI.Image>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.SetImage(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGOImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.SetGOImage(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCacheState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			obj.CheckCacheState();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveCache(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DeleteLocal(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLocal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.CheckLocal(arg0);
				return 0;
			}
			else if (count == 3)
			{
				NetImageManager obj = (NetImageManager)ToLua.CheckObject<NetImageManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.CheckLocal(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NetImageManager.CheckLocal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheMaxTotal(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NetImageManager.CacheMaxTotal);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheCheckInterval(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NetImageManager.CacheCheckInterval);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LocalCheckInterval(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NetImageManager.LocalCheckInterval);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NetImageManager.CacheTime);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadMaxTotal(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NetImageManager.LoadMaxTotal);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReloadMaxTotal(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NetImageManager.ReloadMaxTotal);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadTimeout(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NetImageManager.LoadTimeout);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CacheMaxTotal(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetImageManager.CacheMaxTotal = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CacheCheckInterval(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NetImageManager.CacheCheckInterval = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LocalCheckInterval(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NetImageManager.LocalCheckInterval = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CacheTime(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NetImageManager.CacheTime = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadMaxTotal(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetImageManager.LoadMaxTotal = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReloadMaxTotal(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NetImageManager.ReloadMaxTotal = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadTimeout(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NetImageManager.LoadTimeout = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

