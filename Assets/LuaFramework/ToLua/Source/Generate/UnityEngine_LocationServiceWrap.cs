//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_LocationServiceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.LocationService), typeof(System.Object));
		L.RegFunction("Start", Start);
		L.RegFunction("Stop", Stop);
		L.RegFunction("New", _CreateUnityEngine_LocationService);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("isEnabledByUser", get_isEnabledByUser, null);
		L.RegVar("status", get_status, null);
		L.RegVar("lastData", get_lastData, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_LocationService(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.LocationService obj = new UnityEngine.LocationService();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.LocationService.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.LocationService obj = (UnityEngine.LocationService)ToLua.CheckObject<UnityEngine.LocationService>(L, 1);
				obj.Start();
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.LocationService obj = (UnityEngine.LocationService)ToLua.CheckObject<UnityEngine.LocationService>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.Start(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.LocationService obj = (UnityEngine.LocationService)ToLua.CheckObject<UnityEngine.LocationService>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.Start(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.LocationService.Start");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.LocationService obj = (UnityEngine.LocationService)ToLua.CheckObject<UnityEngine.LocationService>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isEnabledByUser(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.LocationService obj = (UnityEngine.LocationService)o;
			bool ret = obj.isEnabledByUser;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isEnabledByUser on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.LocationService obj = (UnityEngine.LocationService)o;
			UnityEngine.LocationServiceStatus ret = obj.status;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index status on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.LocationService obj = (UnityEngine.LocationService)o;
			UnityEngine.LocationInfo ret = obj.lastData;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lastData on a nil value");
		}
	}
}

